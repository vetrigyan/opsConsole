type SensorRoomData @model @aws_iam @aws_cognito_user_pools {
  id: ID!
  sensorId: String!
  flowRate: Int
  roomId: Int!
  occupied: Boolean
}

type Alert @model @aws_iam @aws_cognito_user_pools {
  id: ID!
  sourceObject: String!
  type: AlertType!
  severity: AlertSeverity
  title: String
  notes: String
  createdAt: String
  updatedAt: String
}

enum AlertType {
  WATER_LEAK
  CO2_LEAK
}

enum AlertSeverity {
  CRITICAL
  MAJOR
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelSensorRoomDataConnection {
  items: [SensorRoomData]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelSensorRoomDataFilterInput {
  id: ModelIDFilterInput
  sensorId: ModelStringFilterInput
  flowRate: ModelIntFilterInput
  roomId: ModelIntFilterInput
  occupied: ModelBooleanFilterInput
  and: [ModelSensorRoomDataFilterInput]
  or: [ModelSensorRoomDataFilterInput]
  not: ModelSensorRoomDataFilterInput
}

input CreateSensorRoomDataInput {
  id: ID
  sensorId: String!
  flowRate: Int
  roomId: Int!
  occupied: Boolean
}

input UpdateSensorRoomDataInput {
  id: ID!
  sensorId: String
  flowRate: Int
  roomId: Int
  occupied: Boolean
}

input DeleteSensorRoomDataInput {
  id: ID
}

type ModelAlertConnection {
  items: [Alert]
  nextToken: String
}

input ModelAlertTypeFilterInput {
  eq: AlertType
  ne: AlertType
}

input ModelAlertSeverityFilterInput {
  eq: AlertSeverity
  ne: AlertSeverity
}

input ModelAlertFilterInput {
  id: ModelIDFilterInput
  sourceObject: ModelStringFilterInput
  type: ModelAlertTypeFilterInput
  severity: ModelAlertSeverityFilterInput
  title: ModelStringFilterInput
  notes: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelAlertFilterInput]
  or: [ModelAlertFilterInput]
  not: ModelAlertFilterInput
}

input CreateAlertInput {
  id: ID
  sourceObject: String!
  type: AlertType!
  severity: AlertSeverity
  title: String
  notes: String
  createdAt: String
  updatedAt: String
}

input UpdateAlertInput {
  id: ID!
  sourceObject: String
  type: AlertType
  severity: AlertSeverity
  title: String
  notes: String
  createdAt: String
  updatedAt: String
}

input DeleteAlertInput {
  id: ID
}
